#!/bin/bash

# Step 1: Check if VPC already exists
VPC_NAME="MyVPC"
VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=$VPC_NAME" --query "Vpcs[0].VpcId" --output text)

if [ "$VPC_ID" == "None" ]; then
  # Create a new VPC
  VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query "Vpc.VpcId" --output text)
  aws ec2 create-tags --resources $VPC_ID --tags Key=Name,Value=$VPC_NAME
  echo "Created VPC: $VPC_ID"
else
  echo "VPC $VPC_NAME already exists: $VPC_ID"
fi

# Step 2: Create Subnets
SUBNET_NAME="MySubnet"
SUBNET_ID=$(aws ec2 describe-subnets --filters "Name=tag:Name,Values=$SUBNET_NAME" --query "Subnets[0].SubnetId" --output text)

if [ "$SUBNET_ID" == "None" ]; then
  SUBNET_ID=$(aws ec2 create-subnet --vpc-id $VPC_ID --cidr-block 10.0.1.0/24 --query "Subnet.SubnetId" --output text)
  aws ec2 create-tags --resources $SUBNET_ID --tags Key=Name,Value=$SUBNET_NAME
  echo "Created Subnet: $SUBNET_ID"
else
  echo "Subnet $SUBNET_NAME already exists: $SUBNET_ID"
fi

# Step 3: Create Internet Gateway
IGW_NAME="MyInternetGateway"
IGW_ID=$(aws ec2 describe-internet-gateways --filters "Name=tag:Name,Values=$IGW_NAME" --query "InternetGateways[0].InternetGatewayId" --output text)

if [ "$IGW_ID" == "None" ]; then
  IGW_ID=$(aws ec2 create-internet-gateway --query "InternetGateway.InternetGatewayId" --output text)
  aws ec2 create-tags --resources $IGW_ID --tags Key=Name,Value=$IGW_NAME
  aws ec2 attach-internet-gateway --internet-gateway-id $IGW_ID --vpc-id $VPC_ID
  echo "Created and attached Internet Gateway: $IGW_ID"
else
  echo "Internet Gateway $IGW_NAME already exists: $IGW_ID"
fi

# Step 4: Create Route Table
RTB_NAME="MyRouteTable"
RTB_ID=$(aws ec2 describe-route-tables --filters "Name=tag:Name,Values=$RTB_NAME" --query "RouteTables[0].RouteTableId" --output text)

if [ "$RTB_ID" == "None" ]; then
  RTB_ID=$(aws ec2 create-route-table --vpc-id $VPC_ID --query "RouteTable.RouteTableId" --output text)
  aws ec2 create-tags --resources $RTB_ID --tags Key=Name,Value=$RTB_NAME
  aws ec2 create-route --route-table-id $RTB_ID --destination-cidr-block 0.0.0.0/0 --gateway-id $IGW_ID
  echo "Created Route Table: $RTB_ID"
else
  echo "Route Table $RTB_NAME already exists: $RTB_ID"
fi

# Step 5: Associate Subnet with Route Table
ASSOCIATION_ID=$(aws ec2 describe-route-tables --filters "Name=route-table-id,Values=$RTB_ID" --query "Associations[?SubnetId=='$SUBNET_ID'].RouteTableAssociationId" --output text)

if [ "$ASSOCIATION_ID" == "None" ]; then
  aws ec2 associate-route-table --route-table-id $RTB_ID --subnet-id $SUBNET_ID
  echo "Associated Subnet $SUBNET_ID with Route Table $RTB_ID"
else
  echo "Subnet $SUBNET_ID is already associated with Route Table $RTB_ID"
fi

# Step 6: Enable Public IP on Subnet
SUBNET_PUBLIC_IP=$(aws ec2 describe-subnets --subnet-ids $SUBNET_ID --query "Subnets[0].MapPublicIpOnLaunch" --output text)

if [ "$SUBNET_PUBLIC_IP" == "false" ]; then
  aws ec2 modify-subnet-attribute --subnet-id $SUBNET_ID --map-public-ip-on-launch
  echo "Enabled Public IP Mapping for Subnet: $SUBNET_ID"
else
  echo "Public IP Mapping already enabled for Subnet: $SUBNET_ID"
fi

echo "VPC setup complete!"
